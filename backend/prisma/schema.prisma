generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  STUDENT
  TEACHER
}

enum PersonalProjectStatus {
  PENDING
  APPROVED
  REJECTED
  FAILED
  DONE
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  name             String
  type             UserType
  department       String?
  neptun           String?
  projects         Project[]
  personalProjects PersonalProject[]
  consultations    Consultation[]
  questions        Comment[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Project {
  id               String            @id @default(uuid())
  title            String
  description      String
  capacity         Int
  teacherId        String
  teacher          User              @relation(fields: [teacherId], references: [id])
  personalProjects PersonalProject[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model PersonalProject {
  id            String                @id @default(uuid())
  status        PersonalProjectStatus
  projectId     String
  project       Project               @relation(fields: [projectId], references: [id])
  studentId     String
  student       User                  @relation(fields: [studentId], references: [id])
  consultations Consultation[]
  schedules     Schedule[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
}

model Consultation {
  id                String           @id @default(uuid())
  participants      User[]
  personalProjectId String?
  personalProject   PersonalProject? @relation(fields: [personalProjectId], references: [id])
  date              DateTime
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Schedule {
  id                String          @id @default(uuid())
  personalProjectId String
  personalProject   PersonalProject @relation(fields: [personalProjectId], references: [id])
  deadline          DateTime
  description       String
  comments          Comment[]
  tasks             Task[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Comment {
  id         String   @id @default(uuid())
  question   String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Task {
  id          String   @id @default(uuid())
  description String
  isDone      Boolean
  scheduleId  String
  schedule    Schedule @relation(fields: [scheduleId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
